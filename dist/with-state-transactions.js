function withStateTransactions(t){return{...t,created(){this.state=this._monitorTransactionState(this._state),t.created&&t.created.call(this)},beginTransaction(){this.transactionCache={},this.transaction=!0,this.status="transaction"},endTransaction(){this.transaction=!1,this.status="render",this._processRender()},rollbackTransaction(){Object.keys(this.transactionCache).forEach((t=>this.state[t]=this.transactionCache[t])),this.endTransaction()},_monitorTransactionState(t){const a=this;return new Proxy(t,{set:(t,s,n)=>(t[s]===n||(a.transaction&&!a.transactionCache[s]&&(a.transactionCache[s]=a._copyValue(t[s])),t[s]=n,a.computedCache={},"render"===a.status&&a._processRender()),!0),get:(t,a)=>t[a]})},_copyValue:t=>JSON.parse(JSON.stringify(t))}}export{withStateTransactions};
